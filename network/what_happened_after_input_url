1 网络通信
    互联网内各种设备之间都遵循TCP/IP协议，利用这个协议簇进行通信时，会通过应用层、传输层、网络层、数据链路层进行通信。发送端的数据自顶
向下传输，接收端的数据自底向上传输。
    1.1 输入url
    1.2 应用层DNS解析域名
        发送端首先检查本地是否含有接收方的ip地址，如果没有则向上级dns服务器询问，直至找到或到达根节点。
        DNS查询方式：
        1.2.1 递归方式
            即客户端向dns服务器A发出请求，而A也不能解析，那么A会向上外的DNS服务器B发出请求，以此类推的递归查询。
        1.2.2 迭代方式
            即客户端向dns服务器A发出请求，而A也不能解析，那么继续向DNS服务器B发出请求解析，以此迭代查询。
    1.3 应用层发出HTTP请求
        HTTP请求包含请求头和请求主体部分，请求头包含很多信息，例如请求的方法、协议、目标url、返回信息如何处理等。
    1.4 传输层TCP传输报文
        1.4.1 TCP
            传输控制协议TCP是一种面向连接的、可靠的、基于字节流的传输层协议，它为传输报文提供了安全可靠的传输方式。它将传输报文分为多
        个数据包，并编号管理，方便接收方还原数据。通过“三次握手”等方式可以保证传输的安全可靠。
            三次握手：TCP连接的建立
                1:TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；
                2:TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，此时报文首部中的同部位SYN=1，同时选择一个初始序列
            号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数
            据，但需要消耗掉一个序号。
                3:TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自
            己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗
            一个序号。
                4:TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客
            户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。
                5:当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。
            在这个过程中，如果发送端在一定延迟时间内没有收到接收方的回复，则默认接收方未收到，将再次发送，直至收到回复。

                *** 为什么TCP客户端最后还要发送一次确认呢：这是为了防止已经失效的连接报文又传送到服务器，从而发生错误。如果是两次握手，客
            户端第一次发送一个请求建立报文，但由于网络延迟等原因，客户端以为服务端没有收到，而再次发送一个请求报文，这次请求成功发送并
            被服务端接受而直接建立了连接，完成传输，并关闭连接。但此时如果第一次由于网络延迟发出的请求建立报文到达了服务端，服务端将会
            再次和客户端建立连接，这就造成了不必要的错误和资源的浪费。

            四次挥手：TCP连接的释放
                1：客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数
            据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一
            个序号。
                2：服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT
            （关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要
            发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。
                3：客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前
            还需要接受服务器发送的最后的数据）。
                4：服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了
            一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。
                5：客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了
            TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，
            才进入CLOSED状态。
                6：服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结
            束TCP连接的时间要比客户端早一些。

                *** 为什么TCP客户端最后还要等待2*MSL呢？
                MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。
                1：保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK
            报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个
            2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。
                2：防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL
            时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。

                *** 为什么建立连接是三次握手，关闭连接确是四次挥手呢？
                建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。
                而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方
            了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都
            会分开发送，从而导致多了一次。

                *** 如果已经建立了连接，客户端突然出现故障怎么办？
                TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后
            都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔
            75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。

            常见使用TCP协议的应用程序包括（括号内为端口号）：
                1：文件传输协议FTP(21,20)
                2：远程终端协议TELNET(23),
                3：简单邮件传输协议SMTP(25),
                4：超文本传输协议HTTP(80)。
        1.4.2 UDP
            用户数据报协议UDP是一种无连接的传输层协议。
            常见使用UDP协议的应用程序包括（括号内为端口号）：
            1:TFTP(69)
            2:DNS(53)
    1.5 网络层IP协议查询MAC地址
        IP协议的作用是将TCP分割的数据包传送给接收方。而要传送给接收方，就需要知道接受方的MAC地址，也就是物理地址。IP地址和MAC地址是一
    一对应的，IP地址可以换，但是MAC地址确实固定的。地址解析协议ARP可以将IP地址解析为对应的MAC地址。
    1.6 数据到达数据链路层
        找到接收方的MAC地址之后，就可以将数据放松到数据链路层进行发送。
        此时，客户端请求阶段就结束了。
    1.7 服务端接收数据
        接收端在链路层接收到数据，然后自底向上到应用层。这个过程就包括了在传输层将分割好的数据包重新组合成原来的HTTP报文。
    1.8 服务器响应请求
        服务端接收到客户端的HTTP请求报文后，经过处理，返回响应给客户端。
2 页面渲染
    现代浏览器渲染页面的过程是这样的：解析HTML以构建DOM树 –> 构建渲染树 –> 布局渲染树 –> 绘制渲染树。
    DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树中加入CSS或HTML中的style样式而形成。渲染树只包含需要显示在页面中的DOM元素，像
<head>元素或display属性值为none的元素都不在渲染树中。
    在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的
步骤。在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘
或重排。
